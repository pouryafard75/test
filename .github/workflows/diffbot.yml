name: AST diff Bot

on:
  issue_comment:
    types: [created]

jobs:
  diff:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      # Step 0: Check for @diff trigger and get the URL command
      - name: Check for @diff trigger
        id: trigger
        uses: actions/github-script@v6
        with:
          script: |
            const commentBody = context.payload.comment.body;
            const regex = /@diff\s+(\S+)\s+(\S+)/;  // Match the URL and the next word
            const match = commentBody.match(regex);
            if (match) {
              core.setOutput('triggered', 'true');
              core.setOutput('url', match[1].trim()); 
              core.setOutput('screenshot', match[2] ? match[2].trim() : '');
            } else {
              core.setOutput('triggered', 'false');
            }


          
      # Step 1: Run the exporter
      - name: Running the RM action exporter
        if : ${{ steps.trigger.outputs.triggered == 'true'}}
        uses: pouryafard75/refactoringminer-astdiff-exporter@v0.8.2
        id: run_rm_exporter 
        with:
          OAuthToken: ${{ secrets.OAUTHTOKEN }}
          URL: ${{ steps.trigger.outputs.url }}
          screenshot: ${{ steps.trigger.outputs.screenshot }}


      - name: Echo outputs
        if : ${{ steps.trigger.outputs.triggered == 'true'}}
        run: | 
          echo ${{ steps.run_rm_exporter.outputs.screenshots_path }}
          echo "and"
          echo ${{ steps.run_rm_exporter.outputs.artifact_path }}
            

      # Step 2: Reply to the user with artifact url
      - name: Reply Artifact zip
        if: ${{ steps.trigger.outputs.triggered == 'true' && steps.trigger.outputs.screenshot == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.trigger.outputs.url }}';
            const artifact_url = '${{ steps.run_rm_exporter.outputs.artifact_url }}'; // Add artifact_url output
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ‘‹ You triggered the bot with the URL: \`${url}\`. You can download it here: [Download Artifact](${artifact_url}).`  
            })


      - name: Generate image list
        id: generate-paths
        run: |
          # Ensure the output from the previous step is evaluated properly
          number_of_screenshots="${{ steps.run_rm_exporter.outputs.numberOfScreenshots }}"
          screenshots_path="${{ steps.run_rm_exporter.outputs.screenshots_path }}"
      
          # Initialize an empty string to store paths
          paths=""
      
          # Loop through the screenshots and append to the paths variable
          for i in $(seq 1 $((number_of_screenshots))); do
            paths+=$'\n'"${screenshots_path}$i.png"
          done
          echo $paths
          # Set paths as an environment variable for later steps
          echo "paths<<EOF" >> $GITHUB_ENV
          echo "$paths" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Upload image
        if: ${{ steps.trigger.outputs.screenshot != null }}
        id: upload-image-all
        uses: McCzarny/upload-image@v1.5.0
        with:
          path: ${{ env.paths }}
          uploadMethod: imgbb
          apiKey: '${{ secrets.IMGBB_API_KEY }}'


      - name: Generate image markdown
        id: generate-markdown
        run: |
          markdown="Images:\n"
          count=${{ steps.run_rm_exporter.outputs.numberOfScreenshots }}
          for i in $(seq 1 $count); do
            url=${{ steps.upload-image-all.outputs.urls }}[$((i - 1))]
            markdown+="![${i}](${url})\n"
          done
          echo "markdown<<EOF" >> $GITHUB_ENV
          echo "$markdown" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


          
      - name: 'Comment Screenshots'
        uses: actions/github-script@0.3.0
        if: ${{ steps.trigger.outputs.screenshot != null }}
        with:
          github-token: ${{ secrets.OAUTHTOKEN }}
          script: |
            const markdownBody = process.env.markdown || "";
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Uploaded image(s):\n${markdownBody}`
            });
